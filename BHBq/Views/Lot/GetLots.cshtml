@model GetLotsViewModel
@{
  ViewData["Title"] = "Gestion des lots";
}

<ul class="nav nav-tabs" id="myTab" role="tablist">
  @foreach (var item in @Model.Entreprises)
  {
    string tabId = $"myTab-{item.Id}";
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="@tabId" data-bs-toggle="tab" data-bs-target="@($"#{tabId}-pane")" type="button"
        role="tab" aria-controls="@($"{tabId}-pane")" aria-selected="true">@item.NomEntreprise</button>
    </li>
  }
</ul>
<div class="tab-content" id="myTabContent">
  @foreach (var item in Model.Entreprises)
  {
    List<Lot> lots = Model.Lots
    .Where(l => l.IdEntreprise == @item.Id)
    .ToList();

    string tabId = $"myTab-{item.Id}";
    <div class="tab-pane fade" id="@($"{tabId}-pane")" role="tabpanel" aria-labelledby="@($"{tabId}-tab")" tabindex="0">
      <section class="section">
        <div class="row">
          <div class="col-lg-6">

            <div class="card">
              <div class="card-body">
                <h5 class="card-title">LOTS @item.NomEntreprise</h5>

                <div class="accordion" id="accordionLots">
@foreach (var lot in lots)
{
    if (!lot.IdLot.Contains("."))
    {
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                    data-bs-target="#collapse-@lot.Id" aria-expanded="false" aria-controls="collapse-@lot.Id">
                    @lot.IdLot @lot.Designation
                </button>
            </h2>
            <div id="collapse-@lot.Id" class="accordion-collapse collapse" data-bs-parent="#accordionLots">
                <div class="accordion-body">
                  @foreach (var souslot in lots)
                    {
                      if (souslot.IdLot.StartsWith($"{lot.IdLot}."))
                      { 
                        @souslot.Designation
                      }
                    }
                </div>
            </div>
        </div>
    }
}
                </div>
              </div>
            </div>
          </div>
        </div>
    </div>
  }
</div>

<div class="accordion" id="accordionExample">
  <div class="accordion-item">
    <h2 class="accordion-header">
      <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne"
        aria-expanded="true" aria-controls="collapseOne">
        Accordion Item #1
      </button>
    </h2>
    <div id="collapseOne" class="accordion-collapse collapse show" data-bs-parent="#accordionExample">
      <div class="accordion-body">
        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin
        adds the appropriate classes that we use to style each element. These classes control the overall appearance,
        as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or
        overriding our default variables. It's also worth noting that just about any HTML can go within the
        <code>.accordion-body</code>, though the transition does limit overflow.
      </div>
    </div>
  </div>
  <div class="accordion-item">
    <h2 class="accordion-header">
      <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo"
        aria-expanded="false" aria-controls="collapseTwo">
        Accordion Item #2
      </button>
    </h2>
    <div id="collapseTwo" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
      <div class="accordion-body">
        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin
        adds the appropriate classes that we use to style each element. These classes control the overall appearance,
        as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or
        overriding our default variables. It's also worth noting that just about any HTML can go within the
        <code>.accordion-body</code>, though the transition does limit overflow.
      </div>
    </div>
  </div>
  <div class="accordion-item">
    <h2 class="accordion-header">
      <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree"
        aria-expanded="false" aria-controls="collapseThree">
        Accordion Item #3
      </button>
    </h2>
    <div id="collapseThree" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
      <div class="accordion-body">
        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin
        adds the appropriate classes that we use to style each element. These classes control the overall appearance,
        as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or
        overriding our default variables. It's also worth noting that just about any HTML can go within the
        <code>.accordion-body</code>, though the transition does limit overflow.
      </div>
    </div>
  </div>
</div>